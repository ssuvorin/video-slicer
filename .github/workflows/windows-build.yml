name: Windows EXE Build

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install ffmpeg via Chocolatey and prepare bin (real binaries)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          choco install ffmpeg -y --no-progress
          New-Item -ItemType Directory -Force -Path bin | Out-Null
          # Find real ffmpeg/ffprobe binaries inside Chocolatey package (not shims)
          $ffExe = Get-ChildItem "$env:ChocolateyInstall/lib/ffmpeg*" -Recurse -Filter ffmpeg.exe | Where-Object { $_.FullName -match "\\tools\\.*\\bin\\ffmpeg\.exe$" } | Select-Object -First 1
          $fpExe = Get-ChildItem "$env:ChocolateyInstall/lib/ffmpeg*" -Recurse -Filter ffprobe.exe | Where-Object { $_.FullName -match "\\tools\\.*\\bin\\ffprobe\.exe$" } | Select-Object -First 1
          if (-not $ffExe -or -not $fpExe) {
            Write-Error "Failed to locate real ffmpeg/ffprobe binaries in Chocolatey package."
          }
          Copy-Item $ffExe.FullName bin/ffmpeg.exe -Force
          Copy-Item $fpExe.FullName bin/ffprobe.exe -Force

      - name: Build onefile EXE (no UPX)
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          if (Test-Path dist)  { Remove-Item -Recurse -Force dist }
          if (Test-Path app.spec) { Remove-Item -Force app.spec }
          pyinstaller `
            --name video_slicer `
            --onefile `
            --noconsole `
            --noupx `
            --add-data "README.md;." `
            --add-data "requirements.txt;." `
            --add-binary "bin/ffmpeg.exe;." `
            --add-binary "bin/ffprobe.exe;." `
            app.py

      - name: Upload onefile artifact
        uses: actions/upload-artifact@v4
        with:
          name: video_slicer-windows-onefile
          path: dist/video_slicer.exe

      - name: Build onedir folder (no UPX)
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          if (Test-Path dist)  { Remove-Item -Recurse -Force dist }
          if (Test-Path app.spec) { Remove-Item -Force app.spec }
          pyinstaller `
            --name video_slicer_folder `
            --noconsole `
            --noupx `
            --add-data "README.md;." `
            --add-data "requirements.txt;." `
            --add-binary "bin/ffmpeg.exe;." `
            --add-binary "bin/ffprobe.exe;." `
            app.py

      - name: Zip onedir folder
        shell: pwsh
        run: |
          Compress-Archive -Path dist/video_slicer_folder/* -DestinationPath dist/video_slicer_folder.zip

      - name: Upload onedir artifact
        uses: actions/upload-artifact@v4
        with:
          name: video_slicer-windows-onedir
          path: dist/video_slicer_folder.zip

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/video_slicer.exe
            dist/video_slicer_folder.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
